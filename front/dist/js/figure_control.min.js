var dom=document.getElementById("inner-group"),myChart=echarts.init(dom),app={};option=null;var growthTheater,growthSNH48,growthBEJ48,growthGNZ48,valSNH48,valBEJ48,valGNZ48,valSII,valNII,valHII,valX,valB,valE,valJ,valG,valNIII,valZ,base=+new Date(2014,9,3),oneDay=864e5,date=[],data=[1],my_data=[0],now=new Date(base),growthData=0;function addData(a,t){now=[now.getMonth()+1,now.getDate()].join("/"),date.push(now),my_data.push(t),data.push(1+data[data.length-1]),a&&(date.shift(),data.shift(),my_data.shift()),now=new Date(+new Date(now)+oneDay)}for(var i=1;i<10;i++)addData();function amountPercentage(a,t,e,o,l,r,n,i,m,v,d,h,c){var s=echarts.init(document.getElementById("inner-percentage"));option={title:{text:"集资比例",textStyle:{color:"#C0DAFF"}},tooltip:{trigger:"item",formatter:"{b}: {c} ({d}%)"},series:[{type:"pie",selectedMode:"single",radius:[0,"45%"],label:{normal:{position:"inner"}},labelLine:{normal:{show:!1}},data:[{value:a,name:"SNH48",itemStyle:{color:"#00b6de"}},{value:t,name:"BEJ48",itemStyle:{color:"#ff4083"}},{value:e,name:"GNZ48",itemStyle:{color:"#9FBF40"}}]},{type:"pie",radius:["54%","75%"],label:{normal:{borderRadius:4,rich:{a:{color:"#999",lineHeight:22,align:"center"},hr:{borderColor:"#aaa",width:"100%",borderWidth:.5,height:0},b:{fontSize:16,lineHeight:33},per:{color:"#eee",backgroundColor:"#334455",padding:[2,4],borderRadius:2}}}},data:[{value:o,name:"SII",itemStyle:{color:"#00b6de"}},{value:l,name:"NII",itemStyle:{color:"#9e57b4"}},{value:r,name:"HII",itemStyle:{color:"#f8941d"}},{value:n,name:"X",itemStyle:{color:"#b1d61b"}},{value:i,name:"B",itemStyle:{color:"#ff4083"}},{value:m,name:"E",itemStyle:{color:"#0cc8c3"}},{value:v,name:"J",itemStyle:{color:"#006ab7"}},{value:d,name:"G",itemStyle:{color:"#9FBF40"}},{value:h,name:"NIII",itemStyle:{color:"#ffe249"}},{value:c,name:"Z",itemStyle:{color:"#ea617b"}}]}]},s.setOption(option,!0)}option={title:{text:"集资增长",textStyle:{color:"#C0DAFF"}},xAxis:{type:"category",boundaryGap:!1,data:date},yAxis:{boundaryGap:[0,"100%"],type:"value"},series:[{name:"成交",type:"line",smooth:!0,symbol:"none",stack:"a",areaStyle:{normal:{}},data:my_data}]},option&&"object"==typeof option&&myChart.setOption(option,!0);var ajaxTime=5e3;setInterval(function(){$.ajax({url:"",contentType:"application/json",dataType:"json",type:"GET",success:function(a,t){for(var e in i=0,a){var o=a[e],l=$.parseJSON(o);for(var e in i++,l){var r="#tr-rank-"+i.toString()+" .rank-member",n="#tr-rank-"+i.toString()+" .rank-account";$(r).text(l.member),$(n).text(l.real_amount),$("#amount-total").text(l.amount_total)}}growthData=$.parseJSON(a.growth_total).amount_total,growthTheater=$.parseJSON(a.growth_theater),growthSNH48=growthTheater[0].amount_theater,growthBEJ48=growthTheater[1].amount_theater,growthGNZ48=growthTheater[2].amount_theater,valZ=valNIII=valG=valJ=valE=valB=valX=valHII=valNII=valSII=valGNZ48=valBEJ48=valSNH48=1e3}}),addData(!0,growthData),myChart.setOption({xAxis:{data:date},series:[{name:"成交",data:my_data}]}),amountPercentage(valSNH48,valBEJ48,valGNZ48,valSII,valNII,valHII,valX,valB,valE,valJ,valG,valNIII,valZ)},ajaxTime);var hotPK=function(){echarts.init(document.getElementById("inner-pk")).setOption({title:{text:"热门PK"},tooltip:{},legend:{data:["集资总额"]},xAxis:{data:["李艺彤","黄婷婷","冯薪朵","陆婷","莫寒","赵粤"]},yAxis:{},series:[{name:"集资总额",type:"bar",data:[1500,1e3,400,350,250,300]}]})};$(hotPK);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
