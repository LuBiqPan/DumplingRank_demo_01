var percentageChart=echarts.init(document.getElementById("inner-percentage"));option=null;var sampleTime,growthTotal,growthTheater,growthTeam,growthMember,valSNH48,valBEJ48,valGNZ48,valSII,valNII,valHII,valX,valB,valE,valJ,valG,valNIII,valZ,base=+new Date(2014,9,3),date=[0],data=[1],growthDataTotal=[0],growthDataSNH48=[0],growthDataBEJ48=[0],growthDataGNZ48=[0],now=new Date(base);function amountPercentage(e,a,t,o,r,l,n,m,i,v,h,g,u){var c={title:{text:"集资比例",textStyle:{color:"#C0DAFF"}},tooltip:{trigger:"item",formatter:function(e){return e.name+": "+parseFloat(e.value).toFixed(2)+" ("+e.percent.toFixed(1)+"%)"}},series:[{type:"pie",selectedMode:"single",radius:[0,"45%"],label:{normal:{position:"inner"}},labelLine:{normal:{show:!1}},data:[{value:e,name:"SNH48",itemStyle:{color:"#00b6de"}},{value:a,name:"BEJ48",itemStyle:{color:"#ff4083"}},{value:t,name:"GNZ48",itemStyle:{color:"#9FBF40"}}]},{type:"pie",radius:["54%","75%"],label:{normal:{borderRadius:4,rich:{a:{color:"#999",lineHeight:22,align:"center"},hr:{borderColor:"#aaa",width:"100%",borderWidth:.5,height:0},b:{fontSize:16,lineHeight:33},per:{color:"#eee",backgroundColor:"#334455",padding:[2,4],borderRadius:2}}}},data:[{value:o,name:"SII",itemStyle:{color:"#00b6de"}},{value:r,name:"NII",itemStyle:{color:"#9e57b4"}},{value:l,name:"HII",itemStyle:{color:"#f8941d"}},{value:n,name:"X",itemStyle:{color:"#b1d61b"}},{value:m,name:"B",itemStyle:{color:"#ff4083"}},{value:i,name:"E",itemStyle:{color:"#0cc8c3"}},{value:v,name:"J",itemStyle:{color:"#006ab7"}},{value:h,name:"G",itemStyle:{color:"#9FBF40"}},{value:g,name:"NIII",itemStyle:{color:"#ffe249"}},{value:u,name:"Z",itemStyle:{color:"#ea617b"}}]}]};percentageChart.hideLoading(),percentageChart.setOption(c,!0)}percentageChart.showLoading({text:"正在加载，请稍后...",color:"#C0DAFF",textColor:"#C0DAFF",maskColor:"rgba(255, 255, 255, 0.0)",zlevel:0}),$(document).ready(function(){$(window).width()<=600?(console.log("Mobile"),$(".left-wrapper").hide(),$(".right-wrapper").hide()):($(".left-wrapper").show(),$(".right-wrapper").show())});var ajaxTime=2e3;setInterval(function(){$.ajax({url:"",contentType:"application/json",dataType:"json",type:"GET",success:function(e){for(var a in i=0,e){var t=e[a],o=$.parseJSON(t);for(var a in i++,o){var r="#tr-rank-"+i.toString()+" .rank-member",l="#tr-rank-"+i.toString()+" .rank-account",n="#tr-rank-"+i.toString()+" .rank-vote";$(r).text(o.member),$(l).text(o.real_amount),$(n).text(o.vote),$("#amount-total").text(o.amount_total)}}sampleTime=$.parseJSON(e.growth_total).sample_time,growthTotal=$.parseJSON(e.growth_total).amount_total,growthTheater=$.parseJSON(e.growth_theater),growthTeam=$.parseJSON(e.growth_team),valSNH48=growthTheater[0].amount_theater,valBEJ48=growthTheater[1].amount_theater,valGNZ48=growthTheater[2].amount_theater,valSII=growthTeam[0].amount_team,valNII=growthTeam[1].amount_team,valHII=growthTeam[2].amount_team,valX=growthTeam[3].amount_team,valB=growthTeam[4].amount_team,valE=growthTeam[5].amount_team,valJ=growthTeam[6].amount_team,valG=growthTeam[7].amount_team,valNIII=growthTeam[8].amount_team,valZ=growthTeam[9].amount_team}}),amountPercentage(valSNH48,valBEJ48,valGNZ48,valSII,valNII,valHII,valX,valB,valE,valJ,valG,valNIII,valZ)},ajaxTime);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
