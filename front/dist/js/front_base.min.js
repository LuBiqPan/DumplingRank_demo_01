function FrontBase(){}function getCookie(t){var e=null;if(document.cookie&&""!==document.cookie)for(var n=document.cookie.split(";"),o=0;o<n.length;o++){var s=jQuery.trim(n[o]);if(s.substring(0,t.length+1)===t+"="){e=decodeURIComponent(s.substring(t.length+1));break}}return e}FrontBase.prototype.run=function(){this.listenAuthBoxHover()},FrontBase.prototype.listenAuthBoxHover=function(){var t=$(".auth-box"),e=$(".user-more-box");t.hover(function(){e.show()},function(){e.hide()})};var myajax={get:function(t){t.method="get",this.ajax(t)},post:function(t){t.method="post",this._ajaxSetup(),this.ajax(t)},ajax:function(t){$.ajax(t)},_ajaxSetup:function(){$.ajaxSetup({beforeSend:function(t,e){/^(GET|HEAD|OPTIONS|TRACE)$/.test(e.type)||this.crossDomain||t.setRequestHeader("X-CSRFToken",getCookie("csrftoken"))}})}};function Auth(){var t=this;t.maskWrapper=$(".mask-wrapper"),t.scrollWrapper=$(".scroll-wrapper"),t.smsCaptcha=$(".sms-captcha-btn")}Auth.prototype.run=function(){var t=this;t.listenShowHideEvent(),t.listenSwitchEvent(),t.listenSigninEvent(),t.listenImgCaptchaEvent(),t.listenSmsCaptchaEvent()},Auth.prototype.showEvent=function(){this.maskWrapper.show()},Auth.prototype.hideEvent=function(){this.maskWrapper.hide()},Auth.prototype.listenShowHideEvent=function(){var t=this,e=$(".signin-btn"),n=$(".signup-btn"),o=$(".close-btn");e.click(function(){t.showEvent(),t.scrollWrapper.css({left:0})}),n.click(function(){t.showEvent(),t.scrollWrapper.css({left:-400})}),o.click(function(){t.hideEvent()})},Auth.prototype.listenSwitchEvent=function(){var e=this;$(".switch").click(function(){var t=e.scrollWrapper.css("left");(t=parseInt(t))<0?e.scrollWrapper.animate({left:"0"}):e.scrollWrapper.animate({left:"-400px"})})},Auth.prototype.listenSigninEvent=function(){var s=this,t=$(".signin-group"),a=t.find("input[name='telephone']"),i=t.find("input[name='password']"),c=t.find("input[name='remember']");t.find(".submit-btn").click(function(t){t.preventDefault();var e=a.val(),n=i.val(),o=c.prop("checked");xfzajax.post({url:"/account/login/",data:{telephone:e,password:n,remember:o?1:0,csrfmiddlewaretoken:$("#csrf_token").val()},success:function(t){if(console.log(t),200===t.code)s.hideEvent(),window.location.reload();else{console.log("Login failed.");var e=t.message;if("string"==typeof e||e.constructor==String)console.log(e),window.messageBox.show(e);else for(var n in e){var o=e[n][0];console.log(o),window.messageBox.show(o)}}},fail:function(t){console.log(t)}})})},Auth.prototype.listenImgCaptchaEvent=function(){var t=$(".img-captcha");t.click(function(){t.attr("src","/account/img_captcha/?random="+Math.random())})},Auth.prototype.smsSuccessEvent=function(){var t=this;messageBox.showSuccess("短信验证码发送成功"),t.smsCaptcha.addClass("disabled");var e=60;t.smsCaptcha.unbind("click");var n=setInterval(function(){t.smsCaptcha.text(e+"s"),--e<=0&&(clearInterval(n),t.smsCaptcha.removeClass("disabled"),t.smsCaptcha.text("发送验证码"),t.listenSmsCaptchaEvent())},1e3)},Auth.prototype.listenSmsCaptchaEvent=function(){var e=this,n=$(".signup-group input[name='telephone']");smsCaptcha.click(function(){var t=n.val();t||messageBox.showInfo("Please type a telephone number."),xfzajax.get({url:"/account/sms_captcha/",data:{telephone:t},success:function(t){200==t.code&&e.smsSuccessEvent()},fail:function(t){console.log(t)}})})},$(function(){(new Auth).run()}),$(function(){(new FrontBase).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
